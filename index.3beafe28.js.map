{"mappings":"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","sources":["src/js/refs.js","node_modules/@swc/helpers/lib/_define_property.js","src/js/movie-api-service.js","src/js/film-cards-markup.js","src/js/paginator-markup.js"],"sourcesContent":["export const refs = {\n  body: document.querySelector('body'),\n  paginatorDiv: document.querySelector('.paginator'),\n  decrementBtn: document.querySelector('#btnBack'),\n  incrementBtn: document.querySelector('#btnForward'),\n  filmsContainer: document.querySelector('.js-films-container'),\n  filmsUl: document.querySelector('.films')\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","API_KEY = '407d4e26fe6158c959ba633b835fa721';\n\nexport class MovieApiService {\n  constructor() {\n    this.itemToSearch = 'sherlock';\n    this.page = 1;\n  }\n\n  _baseUrl = 'https:api.themoviedb.org';\n  _genre = [];\n\n  async fetchCards() {\n    const films = await fetch(`${this._baseUrl}/3/search/movie?api_key=${API_KEY}&query=${this.itemToSearch}&page=${this.page}`)\n    const filmsData = await films.json();\n\n    if (this._genre.length > 0) {\n      return this._transformFilms(filmsData, this._genre)\n    }\n\n    const genres = await fetch(`${this._baseUrl}/3/genre/movie/list?api_key=${API_KEY}&query=${this.itemToSearch}&page=${this.page}`)\n    const genresData = await genres.json();\n\n    this._genre = genresData.genres\n    return this._transformFilms(filmsData, this._genre)\n  }\n\n  _transformFilms(filmsData, genres) {\n    // console.log(films);\n    const films = filmsData.results\n\n    const transormedFilms = films\n      .map(({\n        vote_average,\n        vote_count,\n        popularity,\n        title,\n        overview,\n        release_date,\n        poster_path,\n        original_title,\n        genre_ids,\n      }) => {\n\n        const genreNames = genres\n          .filter((genre) => genre_ids.includes(genre.id)).map(genre => genre.name);\n\n        return {\n          genreNames,\n          popularity,\n          title,\n          overview,\n          voteAverage: vote_average,\n          voteCount: vote_count,\n          releaseDate: release_date,\n          posterPath: poster_path,\n          originalTitle: original_title,\n        };\n      })\n    return {\n      ...filmsData,\n      results: transormedFilms,\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n  decrementPage() {\n    this.page -= 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n  get search() {\n    return this.itemToSearch;\n  }\n\n  set search(newSearch) {\n    this.itemToSearch = newSearch;\n  }\n}","import {\n  refs\n} from './refs';\nimport {\n  MovieApiService\n} from './movie-api-service'\n\nconst movieApiService = new MovieApiService;\n\nmovieApiService.fetchCards().then(filmsData => filmCardsMarkup(filmsData.results))\n\nexport default function filmCardsMarkup(films) {\n  const items = films\n    .map(({\n      genreNames,\n      title,\n      releaseDate = '--',\n      posterPath,\n    }) => {\n      const imageSrc = posterPath ? `https://image.tmdb.org/t/p/w500/${posterPath}` : 'https://via.placeholder.com/395x574'\n      return `\n        <li class=\"films__item\">\n            <img \n                class=\"films__img\" \n                src=${imageSrc}\n                alt=\"${title}\">\n            <h3 class=\"films__title\">${title}</h3>\n            <p class=\"films__genre\">${genreNames.join(', ')}</p>\n            <p class=\"films__year\">${releaseDate.slice(0, 4)}</p>\n        </li>\n      `;\n    });\n\n  refs.filmsUl.innerHTML = items.join('');\n}","import {\n  refs\n} from './refs';\nimport {\n  MovieApiService\n} from './movie-api-service'\nimport filmCardsMarkup from './film-cards-markup';\n// import Pagination from 'tui-pagination';\n\n\n// const container = document.getElementById('pagination');\n\n// var pagination2 = new tui.Pagination(document.getElementById('pagination2'), {\n// \ttotalItems: 500,\n// \titemsPerPage: 20,\n// \tvisiblePages: 5,\n// \tcenterAlign: true,\n// });\n\nconst movieApiService = new MovieApiService();\n\nmovieApiService.fetchCards().then(({\n  total_pages,\n  page\n}) => {\n  const btnResult = [];\n\n  for (let i = 1; i <= total_pages; i += 1) {\n    console.log(i);\n\n    function active() {\n      if (i === page) {\n        return 'paginator__page--active';\n      }\n      return ''\n    };\n    btnResult.push(\n      `<button type=\"button\" id=\"${i}\" class=\"paginator__page ${active()}\">${i}</button>`\n    );\n  }\n  console.log(btnResult.join(''));\n\n  // (r.total_pages).map((el) => { return `<button type='button>${el.page}</button>'` });\n  refs.decrementBtn.insertAdjacentHTML('afterend', btnResult.join(''));\n});\n\nrefs.decrementBtn.addEventListener('click', onBtnBack);\nrefs.incrementBtn.addEventListener('click', onBtnForward);\n\nfunction onBtnBack() {\n  console.log('hi - ');\n  movieApiService.decrementPage();\n  // здесь нужно отправлять запрос на список фильмов для следующей страницы\n  movieApiService.fetchCards().then(filmsData => filmCardsMarkup(filmsData.results))\n}\n\nfunction onBtnForward() {\n  console.log('gi +');\n  movieApiService.incrementPage();\n  // здесь нужно отправлять запрос на список фильмов для предыдущей страницы\n  movieApiService.fetchCards().then(filmsData => filmCardsMarkup(filmsData.results))\n}\nconsole.log(refs.decrementBtn);"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","body","document","querySelector","paginatorDiv","decrementBtn","incrementBtn","filmsContainer","filmsUl","Object","defineProperty","$da4b248c00322402$exports","value","default","obj","key","enumerable","configurable","writable","API_KEY","$4a35a8fba172d7b1$export$fe56763d544e0483","async","films","fetch","this","_baseUrl","itemToSearch","page","filmsData","json","_genre","length","_transformFilms","genres","genresData","transormedFilms","results","map","vote_average","vote_count","popularity","title","overview","release_date","poster_path","original_title","genre_ids","filter","genre","includes","id","name","voteAverage","voteCount","releaseDate","posterPath","originalTitle","incrementPage","decrementPage","resetPage","search","newSearch","constructor","$parcel$interopDefault","$aaee0d2911042d8e$export$2e2bcd8739ae039","items","genreNames","join","slice","innerHTML","fetchCards","then","$7840a31ad4907a0d$var$movieApiService","total_pages","btnResult","i","active","console","log","push","insertAdjacentHTML","addEventListener"],"version":3,"file":"index.3beafe28.js.map"}